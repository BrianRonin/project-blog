{
  "data": {
    "posts": {
      "data": [
        {
          "id": "2",
          "attributes": {
            "createdAt": "2022-10-05T03:21:13.425Z",
            "title": "Destructuring",
            "slug": "destructuring",
            "cover": {
              "data": {
                "id": "1",
                "attributes": {
                  "altText": "07_05_2021_Cerimônia_de_Inauguração_da_ponte_sobre_o_Rio_Madeira,_BR-364,_Distrito_de_Abunã_(51164250821)_(cropped).jpg",
                  "url": "https://res.cloudinary.com/brianronin/image/upload/v1664261728/07_05_2021_Cerimonia_de_Inauguracao_da_ponte_sobre_o_Rio_Madeira_BR_364_Distrito_de_Abuna_51164250821_cropped_217663df99.jpg"
                }
              }
            },
            "category": {
              "data": {
                "id": "1",
                "attributes": {
                  "name": "Programação",
                  "slug": "programacao"
                }
              }
            },
            "tags": {
              "data": [
                {
                  "id": "1",
                  "attributes": {
                    "name": "#React"
                  }
                },
                {
                  "id": "2",
                  "attributes": {
                    "name": "#Java_Script"
                  }
                }
              ]
            },
            "author": {
              "data": {
                "id": "2",
                "attributes": {
                  "name": "Brian",
                  "slug": "brian"
                }
              }
            },
            "content": "\n# Atribuição via desestruturação (destructuring assignment)\n\nA sintaxe de **atribuição via desestruturação (destructuring assignment)** é uma expressão JavaScript que possibilita extrair dados de arrays ou objetos em variáveis distintas.\n\n## [Sintaxe](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#sintaxe \"Permalink to Sintaxe\")\n\n```\nvar a, b, rest;\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n[a, b, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(rest); // [3, 4, 5]\n\n({a, b} = {a:1, b:2});\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n// ES2016 - não implementado em Firefox 47a01\n({a, b, ...rest} = {a:1, b:2, c:3, d:4});\n```\n\nCopy to Clipboard\n\n## [Descrição](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#descri%C3%A7%C3%A3o \"Permalink to Descrição\")\n\nAs expressões de objeto e matriz literais fornecem uma maneira fácil de criar pacotes _ad hoc_ de dados .\n\n```\nvar x = [1, 2, 3, 4, 5];\n```\n\nCopy to Clipboard\n\nA atribuição via desestruturação usa sintaxe similar, mas no lado esquerdo da atribuição são definidos quais elementos devem ser extraídos da variável de origem.\n\n```\nvar x = [1, 2, 3, 4, 5];\nvar [y, z] = x;\nconsole.log(y); // 1\nconsole.log(z); // 2\n```\n\nCopy to Clipboard\n\nEsse recurso é semelhante aos recursos presentes em linguagens como Perl e Python.\n\n## [Desestruturação de array](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#desestrutura%C3%A7%C3%A3o_de_array \"Permalink to Desestruturação de array\")\n\n### [Atribuição básica de variável](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#atribui%C3%A7%C3%A3o_b%C3%A1sica_de_vari%C3%A1vel \"Permalink to Atribuição básica de variável\")\n\n```\nvar foo = [\"one\", \"two\", \"three\"];\n\nvar [one, two, three] = foo;\nconsole.log(one); // \"one\"\nconsole.log(two); // \"two\"\nconsole.log(three); // \"three\"\n```\n\nCopy to Clipboard\n\n### [Atribuição separada da declaração](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#atribui%C3%A7%C3%A3o_separada_da_declara%C3%A7%C3%A3o \"Permalink to Atribuição separada da declaração\")\n\nUma variável pode ter seu valor atribuído via desestruturação separadamente da declaração dela.\n\n```\nvar a, b;\n\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n```\n\nCopy to Clipboard\n\n### [Valores padrão](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#valores_padr%C3%A3o \"Permalink to Valores padrão\")\n\nUma variável pode ser atribuída de um padrão, no caso em que o valor retirado do array é undefined.\n\n```\nvar a, b;\n\n[a=5, b=7] = [1];\nconsole.log(a); // 1\nconsole.log(b); // 7\n```\n\nCopy to Clipboard\n\n### [Trocando variáveis](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#trocando_vari%C3%A1veis \"Permalink to Trocando variáveis\")\n\nOs valores de duas variáveis podem ser trocados em uma expressão de desestruturação.\n\nSem atribuição via desestruturação, trocar dois valores requer uma variável temporária (ou, em algumas linguagens de baixo nível, o [Algoritmo XOR Swap](https://pt.wikipedia.org/wiki/Algoritmo_XOR_Swap)).\n\n```\nvar a = 1;\nvar b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n```\n\nCopy to Clipboard\n\n### [Analisando um array retornado de uma função](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#analisando_um_array_retornado_de_uma_fun%C3%A7%C3%A3o \"Permalink to Analisando um array retornado de uma função\")\n\nSempre foi possível retornar uma matriz de uma função. A desestruturação pode tornar mais conciso o trabalho com um valor de retorno do tipo array.\n\nNeste exemplo, `f()` retorna os valores `[1, 2]` como saída, que podem ser analisados em uma única linha com desestruturação.\n\n```\nfunction f() {\n  return [1, 2];\n}\n\nvar a, b;\n[a, b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 2\n```\n\nCopy to Clipboard\n\n### [Ignorando alguns valores retornados](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#ignorando_alguns_valores_retornados \"Permalink to Ignorando alguns valores retornados\")\n\nVocê pode ignorar valores retornados que você não tem interesse:\n\n```\nfunction f() {\n  return [1, 2, 3];\n}\n\nvar [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n```\n\nCopy to Clipboard\n\nVocê também pode ignorar todos os valores retornados:\n\n```\n[,,] = f();\n```\n\nCopy to Clipboard\n\n### [Atribuindo o resto de um array para uma variável](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#atribuindo_o_resto_de_um_array_para_uma_vari%C3%A1vel \"Permalink to Atribuindo o resto de um array para uma variável\")\n\nAo desestruturar um array, você pode atribuir a parte restante deste em uma viáriável usando o padrão rest:\n\n```\nvar [a, ...b] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // [2, 3]\n```\n\nCopy to Clipboard\n\n### [Extraindo valores do resultado de uma expressão regular](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#extraindo_valores_do_resultado_de_uma_express%C3%A3o_regular \"Permalink to Extraindo valores do resultado de uma expressão regular\")\n\nQuando o método de expressão regular [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) encontra um resultado, ele retorna um array que contém primeiro toda a porção resultante da string e depois cada uma das porções da string resultante envolvidas por parênteses na expressão regular. A atribuição via desestruturação lhe permite extrair as partes desses array facilmente, ignorando a porção resultante completa se não precisar.\n\n```\nvar url = \"https://developer.mozilla.org/en-US/Web/JavaScript\";\n\nvar parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url);\nconsole.log(parsedURL); // [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]\n\nvar [, protocol, fullhost, fullpath] = parsedURL;\n\nconsole.log(protocol); // \"https\"\n```\n\nCopy to Clipboard\n\n## [Desestruturação de objeto](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#desestrutura%C3%A7%C3%A3o_de_objeto \"Permalink to Desestruturação de objeto\")\n\n### [Atribuição básica](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#atribui%C3%A7%C3%A3o_b%C3%A1sica \"Permalink to Atribuição básica\")\n\n```\nvar o = {p: 42, q: true};\nvar {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true\n```\n\nCopy to Clipboard\n\n### [Atribuição sem declaração](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#atribui%C3%A7%C3%A3o_sem_declara%C3%A7%C3%A3o \"Permalink to Atribuição sem declaração\")\n\nUma variável pode ter seu valor atribuído via desestruturação separadamente da sua declaração.\n\n```\nvar a, b;\n\n({a, b} = {a:1, b:2});\n```\n\nCopy to Clipboard\n\n**Nota:** Os parênteses `( ... )` ao redor da declaração de atribuição é uma sintaxe necessária quando se utiliza a atribuição via desestruturação de objeto literal sem uma declaração.\n\n`{a, b} = {a:1, b:2}` não é uma sintaxe stand-alone válida, pois `{a, b}` no lado esquerdo é considarada um bloco, não um objeto literal.\n\nNo entanto, `({a, b} = {a:1, b:2})` é valida, assim como `var {a, b} = {a:1, b:2}`\n\n### [Atribuição para variáveis com novos nomes](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#atribui%C3%A7%C3%A3o_para_vari%C3%A1veis_com_novos_nomes \"Permalink to Atribuição para variáveis com novos nomes\")\n\nUma variável pode ser extraída de um objeto e atribuída a uma variável com um nome diferente da propriedade do objeto.\n\n```\nvar o = {p: 42, q: true};\nvar {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true\n```\n\nCopy to Clipboard\n\n### [Valores padrão](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#valores_padr%C3%A3o_2 \"Permalink to Valores padrão\")\n\nUma variável pode ser atribuída de um padrão, no caso em que o valor retirado do objeto é undefined.\n\n```\nvar {a=10, b=5} = {a: 3};\n\nconsole.log(a); // 3\nconsole.log(b); // 5\n```\n\nCopy to Clipboard\n\n### [Definindo um valor padrão de parâmetro de função](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#definindo_um_valor_padr%C3%A3o_de_par%C3%A2metro_de_fun%C3%A7%C3%A3o \"Permalink to Definindo um valor padrão de parâmetro de função\")\n\n#### Versão ES5\n\n```\nfunction drawES5Chart(options) {\n  options = options === undefined ? {} : options;\n  var size = options.size === undefined ? 'big' : options.size;\n  var cords = options.cords === undefined ? { x: 0, y: 0 } : options.cords;\n  var radius = options.radius === undefined ? 25 : options.radius;\n  console.log(size, cords, radius);\n  // now finally do some chart drawing\n}\n\ndrawES5Chart({\n  cords: { x: 18, y: 30 },\n  radius: 30\n});\n```\n\nCopy to Clipboard\n\n#### Versão ES2015\n\n```\nfunction drawES2015Chart({size = 'big', cords = { x: 0, y: 0 }, radius = 25} = {}) {\n  console.log(size, cords, radius);\n  // do some chart drawing\n}\n\ndrawES2015Chart({\n  cords: { x: 18, y: 30 },\n  radius: 30\n});\n```\n\nCopy to Clipboard\n\n### [Objeto aninhado e desestruturação de array](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#objeto_aninhado_e_desestrutura%C3%A7%C3%A3o_de_array \"Permalink to Objeto aninhado e desestruturação de array\")\n\n```\nvar metadata = {\n    title: \"Scratchpad\",\n    translations: [\n       {\n        locale: \"de\",\n        localization_tags: [ ],\n        last_edit: \"2014-04-14T08:43:37\",\n        url: \"/de/docs/Tools/Scratchpad\",\n        title: \"JavaScript-Umgebung\"\n       }\n    ],\n    url: \"/en-US/docs/Tools/Scratchpad\"\n};\n\nvar { title: englishTitle, translations: [{ title: localeTitle }] } = metadata;\n\nconsole.log(englishTitle); // \"Scratchpad\"\nconsole.log(localeTitle);  // \"JavaScript-Umgebung\"\n```\n\nCopy to Clipboard\n\n### [For de iteração e desestruturação](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#for_de_itera%C3%A7%C3%A3o_e_desestrutura%C3%A7%C3%A3o \"Permalink to For de iteração e desestruturação\")\n\n```\nvar people = [\n  {\n    name: \"Mike Smith\",\n    family: {\n      mother: \"Jane Smith\",\n      father: \"Harry Smith\",\n      sister: \"Samantha Smith\"\n    },\n    age: 35\n  },\n  {\n    name: \"Tom Jones\",\n    family: {\n      mother: \"Norah Jones\",\n      father: \"Richard Jones\",\n      brother: \"Howard Jones\"\n    },\n    age: 25\n  }\n];\n\nfor (var {name: n, family: { father: f } } of people) {\n  console.log(\"Name: \" + n + \", Father: \" + f);\n}\n\n// \"Name: Mike Smith, Father: Harry Smith\"\n// \"Name: Tom Jones, Father: Richard Jones\"\n```\n\nCopy to Clipboard\n\n### [Extraindo campos de objetos passados como parâmetro de função](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#extraindo_campos_de_objetos_passados_como_par%C3%A2metro_de_fun%C3%A7%C3%A3o \"Permalink to Extraindo campos de objetos passados como parâmetro de função\")\n\n```\nfunction userId({id}) {\n  return id;\n}\n\nfunction whois({displayName: displayName, fullName: {firstName: name}}){\n  console.log(displayName + \" is \" + name);\n}\n\nvar user = {\n  id: 42,\n  displayName: \"jdoe\",\n  fullName: {\n      firstName: \"John\",\n      lastName: \"Doe\"\n  }\n};\n\nconsole.log(\"userId: \" + userId(user)); // \"userId: 42\"\nwhois(user); // \"jdoe is John\"\n```\n\nCopy to Clipboard\n\nIsso extrai o `id`, `displayName` e `firstName` do objeto `user` e os imprime na tela.\n\n### [Nomes computados de propriedade de objeto e desestruturação](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#nomes_computados_de_propriedade_de_objeto_e_desestrutura%C3%A7%C3%A3o \"Permalink to Nomes computados de propriedade de objeto e desestruturação\")\n\nNomes computados de propriedades, como em [objetos literais](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names), podem ser usados com desestruturação.\n\n```\nlet key = \"z\";\nlet { [key]: foo } = { z: \"bar\" };\n\nconsole.log(foo); // \"bar\"\n```"
          }
        },
        {
          "id": "1",
          "attributes": {
            "createdAt": "2022-10-05T02:48:15.628Z",
            "title": "Comandos Docker",
            "slug": "comandos-docker",
            "cover": {
              "data": {
                "id": "1",
                "attributes": {
                  "altText": "07_05_2021_Cerimônia_de_Inauguração_da_ponte_sobre_o_Rio_Madeira,_BR-364,_Distrito_de_Abunã_(51164250821)_(cropped).jpg",
                  "url": "https://res.cloudinary.com/brianronin/image/upload/v1664261728/07_05_2021_Cerimonia_de_Inauguracao_da_ponte_sobre_o_Rio_Madeira_BR_364_Distrito_de_Abuna_51164250821_cropped_217663df99.jpg"
                }
              }
            },
            "category": {
              "data": {
                "id": "4",
                "attributes": {
                  "name": "Docker",
                  "slug": "docker"
                }
              }
            },
            "tags": {
              "data": [
                {
                  "id": "4",
                  "attributes": {
                    "name": "#Docker"
                  }
                },
                {
                  "id": "5",
                  "attributes": {
                    "name": "#Commands"
                  }
                }
              ]
            },
            "author": {
              "data": {
                "id": "1",
                "attributes": {
                  "name": "Brian",
                  "slug": "brian"
                }
              }
            },
            "content": "## Syntax: `[]` = obrigatorio / `()` = opcional\n## D = #Docker\n## CT = Container\n## DC = #Docker/container\n| Syntax Docker Container                                                | oque faz                  | option                                                                                                                                                                                                                                                                                                                                                         |\n| ---------------------------------------------------------------------- | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **DC** run **`( OPTION )[ IMAGE ]( ID / NAME / HASH )(TERMINAL -c )`** | roda ou cria um container | { -**p** PortOutside:PortInside }, -v **Caminho**, -**c**, ( -**d** no modo \"deamon\" em segundo plano ), ( -**it** com o terminal 'aqui' ), ( [--volumes](https://docs.docker.com/storage/volumes/)=from=VOLUME ), (--rm //removenduo ao executar um comando -c ), (--net #Docker/network/mode //E selecione uma rede), (ifconfig //e mostra a config dele ) (--name //e da um nome) |\n| **DC** start **`[ ID / NAME / HASH ]`**                                | inicia um ct              |                                                                                                                                                                                                                                                                                                                                                                |\n| **DC** stop **`[ ID / NAME / HASH ]`**                                 | parar um ct               |                                                                                                                                                                                                                                                                                                                                                                |\n| **DC** restart **`[ ID / NAME / HASH ]`**                              | reinicia um ct            |                                                                                                                                                                                                                                                                                                                                                                |\n| **DC** ls                                                              | lista os ct em exec       | { -**a** ja criados também }                                                                                                                                                                                                                                                                                                                                   |\n| **DC** image                                                           | lista todas imagens do ct |                                                                                                                                                                                                                                                                                                                                                                |\n| **DC** logs **`[ ID / NAME / HASH ]`**                                 | vizualiza logs de um ct   |                                                                                                                                                                                                                                                                                                                                                                |\n| **DC** spec **`[ ID / NAME / HASH ]`**                                 | inspeciona um ct          |                                                                                                                                                                                                                                                                                                                                                                |\n| **DC** exec **`[ ID / NAME / HASH ]`**`(ifconfig)`                     | roda um comando no ct     |   -it                                                                                                                                                                                                                                                                                                                                                             |\n## DI = #Docker/image \n| Syntax Docker image                                           | oque faz?                                | opções                                                                                                                                           |\n| ------------------------------------------------------------- | ---------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **DI**  **pull** `[ image / image:versao ]`                   | baixa imagem                             |                                                                                                                                                  |\n| **DI**  **inspect** `[ image / image:versao ]`                | inspeciona imagem x | { [--format](https://docs.docker.com/config/formatting/)\"{}\" }                                                                                   |\n| **DI**  **ls**                                                | lista imagens                            |                                                                                                                                                  |\n| **DI**  **tag** `[ image / image:versao ]` 2.0                | Cria uma imagem \"image\" com a tag 2.0    |                                                                                                                                                  |\n| **DI** build `[ Option ][ path ]`                             | Cria uma imagem com Dockerfile           | { -t nome }, { [--build-arg](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg) ARGUMENTO=VALOR } |\n| **DI** push                                                   |                                          |                                                                                                                                                  |\n| **D** **rmi**/**DI** **rm**  **`[ x / x:versao ][ Tag... ]`** | apagar imagem                            |                                                                                                                                                  |\n## Opção ao baixar versão de imagem\n| command | oque faz? | opções |\n| ------- | --------- | ------ |\n|         |           |        |\n\n#Terminal/Commands \n## DN = #Docker/network\n| command                                              | oque faz?                  | opções |\n| ---------------------------------------------------- | -------------------------- | ------ |\n| **DN** ls                                            | mostra os tipos de rede    |        |\n| **DN** create `[ --driver `#Docker/network/mode`  ]` | cria um novo tipo de rede  |        |\n| **DN** inspect `[ DN mode]`                          | inspeciona um tipo de rede |        |\n| **DN** connect #Docker/network/mode  `[ CT ]`        | conecta um CT a um tipo de rede                           |        |\n| **DN** disconnect #Docker/network/mode `[ CT ]`      | disconecta um CT a um tipo de rede                           |        |\n\n\n![testando imagem](https://d1.awsstatic.com/acs/characters/Logos/Docker-Logo_Horizontel_279x131.b8a5c41e56b77706656d61080f6a0217a3ba356d.png)\n#Terminal/Commands\n\n## DP = #Docker/compose\n| command | oque faz? | opções |\n| ------- | --------- | ------ |\n| **DP** up        |   inicia o DP        |        |\n#Terminal/Commands    \n  \n\nrelacionado: [[Docker]]\ntags: #Terminal/Docker/Commands"
          }
        }
      ]
    }
  }
}
